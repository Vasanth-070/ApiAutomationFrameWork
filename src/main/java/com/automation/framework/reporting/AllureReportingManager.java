package com.automation.framework.reporting;

import com.automation.framework.interfaces.ReportingInterface;
import io.qameta.allure.Allure;
import io.qameta.allure.Step;
import io.qameta.allure.model.Status;
import io.restassured.response.Response;
import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;

public class AllureReportingManager implements ReportingInterface {

    @Override
    public void initializeReport(String suiteName, String environment) {
        Allure.parameter("Suite Name", suiteName);
        Allure.parameter("Environment", environment);
        Allure.parameter("Execution Time", System.currentTimeMillis());
    }

    @Override
    public void startTest(String testName, String description) {
        Allure.getLifecycle().updateTestCase(testResult -> {
            testResult.setName(testName);
            testResult.setDescription(description);
        });
    }

    @Override
    @Step("{stepDescription}")
    public void logStep(String stepDescription, String status) {
        Allure.step(stepDescription);
    }

    @Override
    @Step("API Request: {method} {endpoint}")
    public void logApiRequest(String method, String endpoint, String requestBody, String headers) {
        Allure.addAttachment("Request Headers", "application/json", headers, "json");
        Allure.addAttachment("Request Body", "application/json", requestBody, "json");
        Allure.parameter("HTTP Method", method);
        Allure.parameter("Endpoint", endpoint);
    }

    @Override
    @Step("API Response received")
    public void logApiResponse(Response response, String responseBody) {
        Allure.addAttachment("Response Body", "application/json", responseBody, "json");
        Allure.addAttachment("Response Headers", response.getHeaders().toString());
        Allure.parameter("Status Code", response.getStatusCode());
        Allure.parameter("Response Time", response.getTime() + " ms");
    }

    @Override
    public void markTestPassed(String testName, String details) {
        Allure.step(details, Status.PASSED);
    }

    @Override
    public void markTestFailed(String testName, String errorMessage, Throwable exception) {
        Allure.step(errorMessage, Status.FAILED);
        if (exception != null) {
            Allure.addAttachment("Exception Details", exception.toString());
        }
    }

    @Override
    public void markTestSkipped(String testName, String reason) {
        Allure.step(reason, Status.SKIPPED);
    }

    @Override
    public void addScreenshot(String screenshotPath, String description) {
        try {
            Allure.addAttachment(description, "image/png",
                    new java.io.FileInputStream(screenshotPath), "png");
        } catch (Exception e) {
            Allure.addAttachment("Screenshot Error", e.getMessage());
        }
    }

    @Override
    public void finalizeReport() {
        // Allure reports are generated by the command line tool
    }

    @Override
    public String getReportPath() {
        return "reports/allure-results/";
    }
}